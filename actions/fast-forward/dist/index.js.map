{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport * as core from \"@actions/core\";\nimport * as exec from \"@actions/exec\";\nimport * as tc from \"@actions/tool-cache\";\nimport * as os from \"os\";\nimport { Octokit } from \"@octokit/rest\";\n\nconst github = new Octokit();\n\nif (require.main === module) {\n  main().catch((err) => {\n    console.error(err.stack);\n    process.exit(1);\n  });\n}\n\nasync function main(): Promise<void> {\n  try {\n    const inputs = {\n      source: core.getInput(\"source\", { required: true }),\n      target: core.getInput(\"target\", { required: true }),\n      force: core.getBooleanInput(\"force\") || false,\n      version: core.getInput(\"version\") || \"latest\",\n    };\n\n    const version =\n      inputs.version === \"latest\"\n        ? await github.repos\n          .getLatestRelease({\n            owner: \"nexthink-oss\",\n            repo: \"ghup\",\n          })\n          .then((res) => res.data.tag_name)\n        : inputs.version;\n\n    let ghupPath = tc.find(\"ghup\", version);\n\n    if (!ghupPath) {\n      const platform = os.platform();\n      let arch = os.arch();\n      if (arch === \"x64\") {\n        arch = \"amd64\";\n      }\n\n      const ghupUrl = `https://github.com/nexthink-oss/ghup/releases/download/${version}/ghup_${version.slice(1)}_${platform}_${arch}.zip`;\n      const ghupZip = await tc.downloadTool(ghupUrl);\n      const extractPath = await tc.extractZip(ghupZip);\n      ghupPath = await tc.cacheFile(\n        `${extractPath}/ghup`,\n        \"ghup\",\n        \"ghup\",\n        version,\n      );\n    }\n\n    core.addPath(ghupPath);\n\n    const targets = inputs.target.split(/\\s+/); // support multiple, whitespace-separated targets\n    const output = await exec.getExecOutput(\"ghup\", [\n      \"update-ref\",\n      `--force=${inputs.force}`,\n      \"--source\",\n      inputs.source,\n      ...targets,\n    ]);\n\n    if (output.stderr) {\n      await core.group(`Errors`, async () => {\n        core.error(output.stderr);\n      });\n    }\n\n    if (output.exitCode === 0) {\n      await core.group(`Outputs`, async () => {\n        core.info(output.stdout);\n\n        const result = JSON.parse(output.stdout);\n\n        core.setOutput(\"source\", result.source);\n        core.setOutput(\"target\", result.target);\n      });\n    } else {\n      core.setFailed(`Action failed with error ${output.exitCode}`);\n    }\n  } catch (err) {\n    core.setFailed(`Action failed with error ${err}`);\n  }\n}\n"]}